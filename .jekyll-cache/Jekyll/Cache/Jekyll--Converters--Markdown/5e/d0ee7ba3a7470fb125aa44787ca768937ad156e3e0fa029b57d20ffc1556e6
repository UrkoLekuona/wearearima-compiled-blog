I"Í<p>Generalmente cuando se quiere empaquetar una aplicaci√≥n Java en un contenedor Docker, se crea un 
fichero Dockerfile en el proyecto para especificar las propiedades de la imagen Docker, tales como: 
en qu√© imagen se basa, cu√°l es el ejecutable, qu√© puerto se expone, etc.</p>

<p>Una alternativa al fichero Dockerfile es definir esa informaci√≥n en el pom.xml mediante el plugin de 
<a href="https://github.com/GoogleContainerTools/jib">Jib</a> para Maven o Gradle. Las ventajas que nos aporta este proyecto son:</p>

<ul>
  <li>No requiere configurar un fichero Dockerfile en el proyecto ni tener Docker instalado en el equipo para crear im√°genes Docker.</li>
  <li>Logramos que el building de la imagen sea m√°s r√°pido ya que JIB separa en diferentes capas el c√≥digo del proyecto y 
 sus dependencias. Dado que las dependencias no cambian habitualmente, JIB puede reutilizar la capa de dependencias y s√≥lo
 hacer el building de la capa de c√≥digo.</li>
  <li>Simplificamos el flujo de construcci√≥n de la imagen y de publicaci√≥n en un repositorio. Como ilustra la siguiente imagen,
 este flujo antes implicaba varios comandos y con jib lo resolvemos a la ejecuci√≥n de un √∫nico comando.</li>
</ul>

<p><img src="/assets/images/2017-09-11-java-docker-building-with-jib/jib-flow.png" alt="jib-flow" /></p>

<p>En <a href="https://github.com/wearearima/spring-boot-jib-docker">este ejemplo</a> hemos configurado Jib en un proyecto de spring-boot. 
Para ello, hemos a√±adido el plugin de Jib en el pom.xml:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;plugin&gt;
    &lt;groupId&gt;com.google.cloud.tools&lt;/groupId&gt;
    &lt;artifactId&gt;jib-maven-plugin&lt;/artifactId&gt;
    &lt;version&gt;1.5.1&lt;/version&gt;
&lt;/plugin&gt;
</code></pre></div></div>

<p>Con esto ya es suficiente para crear una imagen Docker de nuestra aplicaci√≥n Java. S√≥lo nos hace falta ejecutar el siguiente comando:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>./mvnw compile jib:dockerBuild
</code></pre></div></div>

<p>Jib a partir de la informaci√≥n del proyecto, ha inferido la configuraci√≥n Docker que mejor se ajusta. Por ejemplo, dado que la versi√≥n de Java
definida en el pom es la 8, <code class="highlighter-rouge">&lt;java.version&gt;1.8&lt;/java.version&gt;</code>, la imagen base que ha utilizado es <code class="highlighter-rouge">gcr.io/distroless/java:8</code>, una imagen 
<a href="https://github.com/GoogleContainerTools/distroless">distroless de Goole</a>.</p>

<p>Esa informaci√≥n que antes se especificaba en el Dockerfile es configurable en el plugin de Jib. Por ejemplo, a continuaci√≥n</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;plugin&gt;
    &lt;groupId&gt;com.google.cloud.tools&lt;/groupId&gt;
    &lt;artifactId&gt;jib-maven-plugin&lt;/artifactId&gt;
    &lt;version&gt;1.5.1&lt;/version&gt;
    &lt;configuration&gt;
        &lt;from&gt;
            &lt;image&gt;adoptopenjdk/openjdk8:alpine-slim&lt;/image&gt;
        &lt;/from&gt;
        &lt;to&gt;
            &lt;image&gt;${project.groupId}/${project.artifactId}&lt;/image&gt;
        &lt;/to&gt;
        &lt;container&gt;
            &lt;jvmFlags&gt;
                &lt;jvmFlag&gt;-Djava.security.egd=file:/dev/./urandom&lt;/jvmFlag&gt;
            &lt;/jvmFlags&gt;
        &lt;/container&gt;
    &lt;/configuration&gt;
&lt;/plugin&gt;
</code></pre></div></div>

<p>Si inspeccionamos la imagen recien creada observamos que la imagen fue creada hace ¬°49 a√±os! No se trata de un bug, Jib por defecto elimina
 la fecha de creaci√≥n de la imagen para</p>

<p>https://github.com/GoogleContainerTools/jib/blob/master/docs/faq.md#why-is-my-image-created-48-years-ago</p>

<p>https://reproducible-builds.org/</p>

<p>https://github.com/GoogleContainerTools/jib/issues/606</p>

<p>https://cloud.google.com/blog/products/gcp/introducing-jib-build-java-docker-images-better 
https://github.com/GoogleContainerTools/jib/tree/master/examples/spring-boot</p>
:ET